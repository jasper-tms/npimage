#!/usr/bin/env python3
"""
Command-line executable script for converting an image
file to a different data type.
"""

import sys
import os

import npimage

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print('Usage: npim_cast image_filename(s) output_datatype'
              ' [-m|--maximize-contrast] [-d|--delete-original]')
        sys.exit(1)

    filenames = []
    output_dtype = None
    delete_original = False
    maximize_contrast = False
    for arg in sys.argv[1:]:
        if os.path.isfile(arg):
            filenames.append(arg)
        elif arg.lower() in ('-m', '--maximize-contrast'):
            maximize_contrast = True
        elif arg.lower() in ('-d', '--delete-original'):
            delete_original = True
        elif output_dtype is not None:
            raise RuntimeError(
                'Arguments must be filenames, -m, -d, or the data type to cast'
                f' to, but got both {output_dtype} and {arg}'
            )
        else:
            output_dtype = arg

    if output_dtype is None:
        raise RuntimeError('No output data type specified')

    for filename in filenames:
        print(f'Converting {filename} to {output_dtype}')
        if '.' not in filename:
            raise RuntimeError(f'Filename {filename} does not have an extension')
        im, metadata = npimage.load(filename, return_metadata=True)
        output_filename = filename.rsplit('.', 1)
        output_filename = output_filename[0] + f'_{output_dtype}.' + output_filename[1]

        converted_im = npimage.cast(im,
                                    output_dtype,
                                    maximize_contrast=maximize_contrast)
        npimage.save(converted_im,
                     output_filename,
                     metadata=metadata)
        if delete_original:
            assert filename != output_filename
            assert os.path.isfile(output_filename)
            os.remove(filename)
            print(f'Deleted {filename}')
