#!/usr/bin/env python3
"""
Command-line executable script for combining a series of N-dimensional
image files into a single N+1-dimensional image stack

TODOs:
- [ ] Imlement -s (voxel size for the new dimension)
- [ ] Test -l|--new-axis-last
"""

import sys
import os

import npimage
import numpy as np


def is_metadata_equal(m1, m2):
    """
    Check whether two ordereddicts are equal, taking into account that
    numpy arrays must be compared element-wise
    """
    return all(
        k1 == k2 and (v1 == v2 if not isinstance(v1, np.ndarray) else (v1 == v2).all())
        for (k1, v1), (k2, v2) in zip(m1.items(), m2.items())
    )


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print('Usage: npim_stack image1_filename image2_filename ... output_filename'
              ' [-s voxel_size] [-l|--new-axis-last]')
        sys.exit(1)

    filenames = []
    output_filename = None
    voxel_size = 1
    if '-s' in sys.argv:
        i = sys.argv[sys.argv.index('-s')]
        voxel_size = sys.argv[i]
        del sys.argv[i], sys.argv[i+1]
    new_axis_first = True
    for i, arg in enumerate(sys.argv[1:]):
        if arg == voxel_size:
            continue
        if os.path.isfile(arg):
            filenames.append(arg)
        elif arg.lower() in ('-l', '--new-axis-last'):
            new_axis_first = False
        elif output_filename is not None:
            raise RuntimeError(
                'Arguments must be filenames, -s, or the output filename'
                f' but got both {output_filename} and {arg}'
            )
        else:
            output_filename = arg
    if output_filename is None:
        raise RuntimeError('No output filename specified')

    data = []
    metadata = None
    warned = False
    for filename in filenames:
        data_, metadata_ = npimage.load(filename, return_metadata=True)
        if metadata is None:
            metadata = metadata_
        if not warned and not is_metadata_equal(metadata, metadata_):
            print("WARNING: Metadata for the given files don't match. The metadata"
                  " of the first file will be used.")
            warned = True
        data.append(data_)

    axis = 0 if new_axis_first else -1
    stack = np.stack(data, axis=axis)
    # TODO add the voxel size to the metadata if possible
    npimage.save(stack, output_filename, metadata=metadata)
