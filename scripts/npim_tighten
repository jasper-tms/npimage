#!/usr/bin/env python3
"""
Remove empty border rows & columns from an image.

Usage:
    npim_tighten input_image.png [-r|--replace]
"""

import sys
from pathlib import Path

import npimage

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('Remove empty border rows & columns from an image.')
        print('Usage:')
        print('    npim_tighten image_filename [-r|--replace]')
        print('If -r or --replace is given, the input file will be overwritten.')
        print('Otherwise, a new file will be created with "_tight" added to the name.')
        sys.exit(1)

    fn = Path(sys.argv[1])
    if len(sys.argv) > 2 and sys.argv[2] in ['-r', '--replace']:
        out_fn = fn
    else:
        out_fn = fn.with_stem(fn.stem + '_tight')
        if out_fn.exists():
            raise FileExistsError(f'Output file {out_fn} already exists')

    im = npimage.load(fn)
    zero_slicer = [0] * im.ndim
    color_axis = npimage.find_channel_axis(im)
    if color_axis is not None:
        zero_slicer[color_axis] = slice(None)
    first_element = im[tuple(zero_slicer)]

    final_slicer = [slice(0, s) for s in im.shape]
    for axis in range(im.ndim):
        if axis == color_axis:
            continue
        slicer = [slice(None)] * im.ndim
        slicer[axis] = 0
        while (im[tuple(slicer)] == first_element).all() and slicer[axis] < final_slicer[axis].stop - 1:
            final_slicer[axis] = slice(final_slicer[axis].start + 1, final_slicer[axis].stop)
            slicer[axis] = final_slicer[axis].start
        slicer[axis] = final_slicer[axis].stop - 1
        while (im[tuple(slicer)] == first_element).all() and slicer[axis] > final_slicer[axis].start:
            final_slicer[axis] = slice(final_slicer[axis].start, final_slicer[axis].stop - 1)
            slicer[axis] = final_slicer[axis].stop - 1

    cropped = im[tuple(final_slicer)]
    npimage.save(cropped, out_fn, overwrite=True)
